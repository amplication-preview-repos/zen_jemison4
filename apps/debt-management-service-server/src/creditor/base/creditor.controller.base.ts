/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CreditorService } from "../creditor.service";
import { CreditorCreateInput } from "./CreditorCreateInput";
import { Creditor } from "./Creditor";
import { CreditorFindManyArgs } from "./CreditorFindManyArgs";
import { CreditorWhereUniqueInput } from "./CreditorWhereUniqueInput";
import { CreditorUpdateInput } from "./CreditorUpdateInput";
import { DebtFindManyArgs } from "../../debt/base/DebtFindManyArgs";
import { Debt } from "../../debt/base/Debt";
import { DebtWhereUniqueInput } from "../../debt/base/DebtWhereUniqueInput";

export class CreditorControllerBase {
  constructor(protected readonly service: CreditorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Creditor })
  async createCreditor(
    @common.Body() data: CreditorCreateInput
  ): Promise<Creditor> {
    return await this.service.createCreditor({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        contactEmail: true,
        phoneNumber: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Creditor] })
  @ApiNestedQuery(CreditorFindManyArgs)
  async creditors(@common.Req() request: Request): Promise<Creditor[]> {
    const args = plainToClass(CreditorFindManyArgs, request.query);
    return this.service.creditors({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        contactEmail: true,
        phoneNumber: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Creditor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async creditor(
    @common.Param() params: CreditorWhereUniqueInput
  ): Promise<Creditor | null> {
    const result = await this.service.creditor({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        contactEmail: true,
        phoneNumber: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Creditor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCreditor(
    @common.Param() params: CreditorWhereUniqueInput,
    @common.Body() data: CreditorUpdateInput
  ): Promise<Creditor | null> {
    try {
      return await this.service.updateCreditor({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          contactEmail: true,
          phoneNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Creditor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCreditor(
    @common.Param() params: CreditorWhereUniqueInput
  ): Promise<Creditor | null> {
    try {
      return await this.service.deleteCreditor({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          contactEmail: true,
          phoneNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/debts")
  @ApiNestedQuery(DebtFindManyArgs)
  async findDebts(
    @common.Req() request: Request,
    @common.Param() params: CreditorWhereUniqueInput
  ): Promise<Debt[]> {
    const query = plainToClass(DebtFindManyArgs, request.query);
    const results = await this.service.findDebts(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        dueDate: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },

        creditor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/debts")
  async connectDebts(
    @common.Param() params: CreditorWhereUniqueInput,
    @common.Body() body: DebtWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      debts: {
        connect: body,
      },
    };
    await this.service.updateCreditor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/debts")
  async updateDebts(
    @common.Param() params: CreditorWhereUniqueInput,
    @common.Body() body: DebtWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      debts: {
        set: body,
      },
    };
    await this.service.updateCreditor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/debts")
  async disconnectDebts(
    @common.Param() params: CreditorWhereUniqueInput,
    @common.Body() body: DebtWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      debts: {
        disconnect: body,
      },
    };
    await this.service.updateCreditor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
