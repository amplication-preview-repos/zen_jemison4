/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Creditor } from "./Creditor";
import { CreditorCountArgs } from "./CreditorCountArgs";
import { CreditorFindManyArgs } from "./CreditorFindManyArgs";
import { CreditorFindUniqueArgs } from "./CreditorFindUniqueArgs";
import { CreateCreditorArgs } from "./CreateCreditorArgs";
import { UpdateCreditorArgs } from "./UpdateCreditorArgs";
import { DeleteCreditorArgs } from "./DeleteCreditorArgs";
import { DebtFindManyArgs } from "../../debt/base/DebtFindManyArgs";
import { Debt } from "../../debt/base/Debt";
import { CreditorService } from "../creditor.service";
@graphql.Resolver(() => Creditor)
export class CreditorResolverBase {
  constructor(protected readonly service: CreditorService) {}

  async _creditorsMeta(
    @graphql.Args() args: CreditorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Creditor])
  async creditors(
    @graphql.Args() args: CreditorFindManyArgs
  ): Promise<Creditor[]> {
    return this.service.creditors(args);
  }

  @graphql.Query(() => Creditor, { nullable: true })
  async creditor(
    @graphql.Args() args: CreditorFindUniqueArgs
  ): Promise<Creditor | null> {
    const result = await this.service.creditor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Creditor)
  async createCreditor(
    @graphql.Args() args: CreateCreditorArgs
  ): Promise<Creditor> {
    return await this.service.createCreditor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Creditor)
  async updateCreditor(
    @graphql.Args() args: UpdateCreditorArgs
  ): Promise<Creditor | null> {
    try {
      return await this.service.updateCreditor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Creditor)
  async deleteCreditor(
    @graphql.Args() args: DeleteCreditorArgs
  ): Promise<Creditor | null> {
    try {
      return await this.service.deleteCreditor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Debt], { name: "debts" })
  async findDebts(
    @graphql.Parent() parent: Creditor,
    @graphql.Args() args: DebtFindManyArgs
  ): Promise<Debt[]> {
    const results = await this.service.findDebts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
