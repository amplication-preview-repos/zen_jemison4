/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Debt } from "./Debt";
import { DebtCountArgs } from "./DebtCountArgs";
import { DebtFindManyArgs } from "./DebtFindManyArgs";
import { DebtFindUniqueArgs } from "./DebtFindUniqueArgs";
import { CreateDebtArgs } from "./CreateDebtArgs";
import { UpdateDebtArgs } from "./UpdateDebtArgs";
import { DeleteDebtArgs } from "./DeleteDebtArgs";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { User } from "../../user/base/User";
import { Creditor } from "../../creditor/base/Creditor";
import { DebtService } from "../debt.service";
@graphql.Resolver(() => Debt)
export class DebtResolverBase {
  constructor(protected readonly service: DebtService) {}

  async _debtsMeta(
    @graphql.Args() args: DebtCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Debt])
  async debts(@graphql.Args() args: DebtFindManyArgs): Promise<Debt[]> {
    return this.service.debts(args);
  }

  @graphql.Query(() => Debt, { nullable: true })
  async debt(@graphql.Args() args: DebtFindUniqueArgs): Promise<Debt | null> {
    const result = await this.service.debt(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Debt)
  async createDebt(@graphql.Args() args: CreateDebtArgs): Promise<Debt> {
    return await this.service.createDebt({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        creditor: args.data.creditor
          ? {
              connect: args.data.creditor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Debt)
  async updateDebt(@graphql.Args() args: UpdateDebtArgs): Promise<Debt | null> {
    try {
      return await this.service.updateDebt({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          creditor: args.data.creditor
            ? {
                connect: args.data.creditor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Debt)
  async deleteDebt(@graphql.Args() args: DeleteDebtArgs): Promise<Debt | null> {
    try {
      return await this.service.deleteDebt(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Payment], { name: "payments" })
  async findPayments(
    @graphql.Parent() parent: Debt,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Debt): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Creditor, {
    nullable: true,
    name: "creditor",
  })
  async getCreditor(@graphql.Parent() parent: Debt): Promise<Creditor | null> {
    const result = await this.service.getCreditor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
