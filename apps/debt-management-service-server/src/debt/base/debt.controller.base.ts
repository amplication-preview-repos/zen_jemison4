/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DebtService } from "../debt.service";
import { DebtCreateInput } from "./DebtCreateInput";
import { Debt } from "./Debt";
import { DebtFindManyArgs } from "./DebtFindManyArgs";
import { DebtWhereUniqueInput } from "./DebtWhereUniqueInput";
import { DebtUpdateInput } from "./DebtUpdateInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";

export class DebtControllerBase {
  constructor(protected readonly service: DebtService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Debt })
  async createDebt(@common.Body() data: DebtCreateInput): Promise<Debt> {
    return await this.service.createDebt({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        creditor: data.creditor
          ? {
              connect: data.creditor,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        dueDate: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },

        creditor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Debt] })
  @ApiNestedQuery(DebtFindManyArgs)
  async debts(@common.Req() request: Request): Promise<Debt[]> {
    const args = plainToClass(DebtFindManyArgs, request.query);
    return this.service.debts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        dueDate: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },

        creditor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Debt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async debt(
    @common.Param() params: DebtWhereUniqueInput
  ): Promise<Debt | null> {
    const result = await this.service.debt({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        dueDate: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },

        creditor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Debt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDebt(
    @common.Param() params: DebtWhereUniqueInput,
    @common.Body() data: DebtUpdateInput
  ): Promise<Debt | null> {
    try {
      return await this.service.updateDebt({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          creditor: data.creditor
            ? {
                connect: data.creditor,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          dueDate: true,
          status: true,

          user: {
            select: {
              id: true,
            },
          },

          creditor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Debt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDebt(
    @common.Param() params: DebtWhereUniqueInput
  ): Promise<Debt | null> {
    try {
      return await this.service.deleteDebt({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          dueDate: true,
          status: true,

          user: {
            select: {
              id: true,
            },
          },

          creditor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: DebtWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        paymentDate: true,

        debt: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  async connectPayments(
    @common.Param() params: DebtWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateDebt({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  async updatePayments(
    @common.Param() params: DebtWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateDebt({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  async disconnectPayments(
    @common.Param() params: DebtWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateDebt({
      where: params,
      data,
      select: { id: true },
    });
  }
}
